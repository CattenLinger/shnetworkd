#!/bin/sh

set -ex

COMMAND_PATH="$(realpath $0)"

# TODO: Search SHNETWORKD_HOME
SHNETWORKD="$(realpath ""$COMMAND_PATH"")"
SHNETWORKD_HOME="$(dirname $SHNETWORKD)/.."
SHNETWORKD_HOME="$(realpath "$SHNETWORKD_HOME")"

[ -z "$SHNETWORKD_CONFIG_HOME" ] && SHNETWORKD_CONFIG_HOME="$SHNETWORKD_HOME/config"

[ -z "$SHNETWORKD_RUN_DIR" ] && SHNETWORKD_RUN_DIR="/tmp/shnetworkd.run"

. "$SHNETWORKD_HOME/lib/core"

#
# Import
#
import _ from "$SHNETWORKD_HOME/lib/rt"

__target_zone() {

    local args=("$@")
    local name="${args[0]}"
    assertNotBlank s"$name" "[Zone] Parameter 1(zone_name) required." | log_tofile "$log_file"
    local op="${args[1]}"

    local dispatcher_shutdownhook="$SHNETWORKD_RUN_DIR/shnetworkd.shutdownhook"
    local dispatcher_inbound="$SHNETWORKD_RUN_DIR/inbound"

    local manager_pid_file="$SHNETWORKD_RUN_DIR/zones/$name/pid"

    case "$op" in
        'up'|'restart')
            echo "$SHNETWORKD ::zone '$name' 2>&1  &" > "$dispatcher_inbound"
        ;;
        'down')
            [ -f "$manager_pid_file" ] || return 0

            local pid="$(cat "$manager_pid_file")"
            if [ b'true' == b"$(pid_alive $pid)"]
            then
                kill -s SIGINT "$pid"
            fi
        ;;
        'status')

        ;;
        *)
            log_error "[Zone][$name] unknown operation '$op'" 2>&1 | log_tofile "$log_file"
        ;;
    esac
}

#
# Print Help
#
_help() {

    >&2 cat << EOF Usage: shnetworkd <target> [args...]
Targets:"
- zone <zone name> [up|down|restart]"
    Start/Stop/Restart a network zone."
  zone <zone name> [status]
    Show zone status
EOF
}

_main_daemon() {
    local target="$1"
    local args=("${@:2}")

    local targetName="${target:2}"
    local functionName="__daemon_$targetName"
    . "$SHNETWORKD_HOME/modules/daemons/$targetName"

    if [ ! $(declare -F "$functionName" ) ]
    then
        log_error "Unknown daemon target: $targetName"
        exit 1
    fi
    eval "$functionName $args"
}

_main_target() {
    local target="$1"
    local args=("${@:2}")

    case "$target" in
        '-h'|'--help')
            _help 1>&2
            exit 0
        ;;

        '--daemon')
            use RuntimeDir "$SHNETWORKD_RUN_DIR"
            touch "$RUNTIME_DIR/log"
            "$SHNETWORKD ::mainDispatcher ${@[@]}" 2>&1 | tee -a "$RUNTIME_DIR/log"
        ;;

        *)
            local targetName="$target"

            local functionName="__target_$targetName"
            if [ ! $(declare -F "$functionName") ]
            then
                echo "[!] Unknown target '$targetName' with arguments '$args'."
                echo
                _help 1>&2
                exit 1
            fi
            eval "$functionName $args"
        ;;
    esac
}

_main() {

    local target="$1"

    if [ s'::' == s"${target:0:2}" ]
    then
        _main_daemon ${@[@]}
    else
        _main_target ${@[@]}
    fi
}

_main $@
